{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creates a VPC and an auto-scaling group",
    
    "Parameters": {
        "WebServerKeyName": {
            "Description": "SSH keypair for ec2 instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        }    
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.90.0.0/16",
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true,
                "InstanceTenancy": "default",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BlogVPC"
                    }
                ]
                
            }    
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "DependsOn": "VPC",
            "Properties": {
                "Tags": [ 
                    {
                        "Key": "Name", 
                        "Value": "Blogigw"
                    }
                ]    
            } 
        },
        "InternetGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {"Ref": "InternetGateway"},
                "VpcId": {"Ref": "VPC"}
                
            }
        },
        "DMZ1Public": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.99.1.0/24",
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {
                        "KeyName": "Name",
                        "Value": "DMZ1Public"
                    }
                ]

            }
        },
        "DMZ2Public": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.99.2.0/24",
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {
                        "KeyName": "Name",
                        "Value": "DMZ2Public"
                    }
                ]

            }
        },
        "AppLayer1Private": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.99.11.0/24",
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {
                        "KeyName": "Name",
                        "Value": "AppLayer1Private"
                    }
                ]

            }
        },
        "AppLayer2Private": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "10.99.12.0/24",
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {
                        "KeyName": "Name",
                        "Value": "AppLayer2Private"
                    }
                ]

            }
        },
        "PublicRT": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {
                        "KeyName": "Name",
                        "Value": "PublicRT"
                    }
                ]
 
            }
        },
        "RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DMZ1Public" 
                },
                "RouteTableId": {
                    "Ref": "PublicRT"
                }
            }
        },
        "RouteTableAssociationB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DMZ2Public" 
                },
                "RouteTableId": {
                    "Ref": "PublicRT"
                }
            }
        },
        "RoutePublicToInternet": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRT"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {"Ref": "InternetGateway"}

            },
            "DependsOn": "InternetGatewayAttachment"


        },
        "PrivateRT": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [ 
                    {
                        "Key": "Name",
                        "Value": "PrivateRT"
                    }
                ]
            }

        },
        "RouteTableAssociationC": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "AppLayer1Private" 
                },
                "RouteTableId": {
                    "Ref": "PrivateRT"
                }
            }
        },
        "RouteTableAssociationD": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "AppLayer2Private" 
                },
                "RouteTableId": {
                    "Ref": "PrivateRT"
                }
            }
        },

        "NATElasticIp": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "VPC"
            },
            "DependsOn": "InternetGatewayAttachment"
        },
        "NATGateway": {
            "Type": "AWS::EC2::NatGateway",
            "DependsOn": "NATElasticIp",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NATElasticIp",
                        "AllocationId"
                    ]
                        
                    
                },
                "SubnetId": {
                    "Ref": "DMZ2Public"
                }
            }
        },
        "NATGatewayRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRT"
                },
                "CidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGateway"
                }
            }
        },
        "DMZNACL": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DMZNACL"
                    }
                ]
            }

        },
        "SubnetNetworkAclAssociationA": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {"Ref": "DMZ1Public"},
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                }
            }

        },
        "SubnetNetworkAclAssociationB": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {"Ref": "DMZ2Public"},
                "NetworkAclId": {
                    "Ref": "DMZNACL"
                }
            }

        },
        "DMZNACLEntryIngress100": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "DMZNACL"}
            },
            "RuleNumber": 100,
            "Protocol": "6",
            "PortRange": {
                "From": "22",
                "To": "22"
            },
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": "0.0.0.0/0"

        },
        "DMZNACLEntryIngress110": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "DMZNACL"}
            },
            "RuleNumber": 110,
            "Protocol": "6",
            "PortRange": {
                "From": "80",
                "To": "80"
            },
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": "0.0.0.0/0"

        },
        "DMZNACLEntryIngress120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "DMZNACL"}
            },
            "RuleNumber": 120,
            "Protocol": "6",
            "PortRange": {
                "From": "443",
                "To": "443"
            },
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": "0.0.0.0/0"

        },
        "DMZNACLEntryIngress130": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "DMZNACL"}
            },
            "RuleNumber": 130,
            "Protocol": "6",
            "PortRange": {
                "From": "1024",
                "To": "65535"
            },
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": "0.0.0.0/0"

        },
        "DMZNACLEntryEgress100": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "DMZNACL"}
            },
            "RuleNumber": 100,
            "Protocol": "6",
            "PortRange": {
                "From": "22",
                "To": "22"
            },
            "RuleAction": "allow",
            "Egress": "true",
            "CidrBlock": "0.0.0.0/0"

        },
        "DMZNACLEntryEgress110": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "DMZNACL"}
            },
            "RuleNumber": 110,
            "Protocol": "6",
            "PortRange": {
                "From": "80",
                "To": "80"
            },
            "RuleAction": "allow",
            "Egress": "true",
            "CidrBlock": "0.0.0.0/0"

        },
        "DMZNACLEntryEgress120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "DMZNACL"}
            },
            "RuleNumber": 120,
            "Protocol": "6",
            "PortRange": {
                "From": "443",
                "To": "443"
            },
            "RuleAction": "allow",
            "Egress": "true",
            "CidrBlock": "0.0.0.0/0"

        },
        "DMZNACLEntryEgress130": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "DMZNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "DMZNACL"}
            },
            "RuleNumber": 130,
            "Protocol": "6",
            "PortRange": {
                "From": "1024",
                "To": "65535"
            },
            "RuleAction": "allow",
            "Egress": "true",
            "CidrBlock": "0.0.0.0/0"

        },
        "AppNACL": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {"Ref": "VPC"},
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "AppNACL"
                    }
                ]
            }

        },
        "SubnetNetworkAclAssociationC": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {"Ref": "AppLayer1Private"},
                "NetworkAclId": {
                    "Ref": "AppNACL"
                }
            }

        },
        "SubnetNetworkAclAssociationD": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {"Ref": "AppLayer2Private"},
                "NetworkAclId": {
                    "Ref": "AppNACL"
                }
            }
        },
        "AppNACLEntryIngress100": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "AppNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "AppNACL"}
            },
            "RuleNumber": 100,
            "Protocol": "6",
            "PortRange": {
                "From": "22",
                "To": "22"
            },
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": "10.90.0.0/16"

        },
        "AppNACLEntryIngress110": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "AppNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "AppNACL"}
            },
            "RuleNumber": 110,
            "Protocol": "6",
            "PortRange": {
                "From": "80",
                "To": "80"
            },
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": "10.90.0.0/16"

        },
        "AppNACLEntryIngress120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "AppNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "AppNACL"}
            },
            "RuleNumber": 120,
            "Protocol": "6",
            "PortRange": {
                "From": "443",
                "To": "443"
            },
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": "10.90.0.0/16"

        },
        "AppNACLEntryIngress130": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "AppNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "AppNACL"}
            },
            "RuleNumber": 130,
            "Protocol": "6",
            "PortRange": {
                "From": "1024",
                "To": "65535"
            },
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": "0.0.0.0/0"

        },
        "AppNACLEntryEgress100": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "AppNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "AppNACL"}
            },
            "RuleNumber": 100,
            "Protocol": "6",
            "PortRange": {
                "From": "22",
                "To": "22"
            },
            "RuleAction": "allow",
            "Egress": "true",
            "CidrBlock": "0.0.0.0/0"

        },
        "AppNACLEntryEgress110": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "AppNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "AppNACL"}
            },
            "RuleNumber": 110,
            "Protocol": "6",
            "PortRange": {
                "From": "80",
                "To": "80"
            },
            "RuleAction": "allow",
            "Egress": "true",
            "CidrBlock": "0.0.0.0/0"

        },
        "AppNACLEntryEgress120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "AppNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "AppNACL"}
            },
            "RuleNumber": 120,
            "Protocol": "6",
            "PortRange": {
                "From": "443",
                "To": "443"
            },
            "RuleAction": "allow",
            "Egress": "true",
            "CidrBlock": "0.0.0.0/0"

        },
        "AppNACLEntryEgress130": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "DependsOn": "AppNACL",
            "Properties": {
                "NetworkAclId": {"Ref": "AppNACL"}
            },
            "RuleNumber": 130,
            "Protocol": "6",
            "PortRange": {
                "From": "1024",
                "To": "65535"
            },
            "RuleAction": "allow",
            "Egress": "true",
            "CidrBlock": "0.0.0.0/0"

        },
        "LoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Subnets": [
                    {
                        "Ref": "DMZ1Public"
                    },
                    {
                        "Ref": "DMZ2Public"
                    }
                ],
                "Name": "load-balancer",
                "Type": "application",
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "IpAdressType": "ipv4"

            }
        },
        "Listener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [ {
                    "Type": "forward",
                    "TargetGroupArn": {
                        "Ref": "TargetGroup"
                    }
                }
                    
                ],
                "LoadBalancerArn": {
                    "Ref": "LoadBalancer"
                },
                "Port": "80",
                "Protocol": "HTTP"


            }
        },
        "TargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds" : "10",
                "HealthCheckPath": "/phpinfo.php",
                "HealthCheckPort": "80",
                "HealthCheckProtocol": "HTTP",
                "HealthyThresholdCount": "2",
                "Name": "TG-1",
                "Port": "80",
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": "2",
                "VpcId": {"Ref": "VPC"}

            }
        },
        "BastionSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "Description": "Bastion SG",
                "VpcId": {"Ref": "VPC"}
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "BastionSG"
                }
            ],
            "SecurityGroupIngress": [
                {
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": 22,
                    "ToPort": 22,
                    "Protocol": "tcp" 
                }
            ]
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "Description": "Load-Balancer SG",
                "VpcId": {"Ref": "VPC"}
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "LoadBalancerSG"
                }
            ],
            "SecurityGroupIngress": [
                {
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": 80,
                    "ToPort": 80,
                    "Protocol": "tcp" 
                },
                {
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": 443,
                    "ToPort": 443,
                    "Protocol": "tcp" 
                }
            ]
        },

        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "Description": "Web-Server SG",
                "VpcId": {"Ref": "VPC"}
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "WebServerSG"
                }
            ],
            "SecurityGroupIngress": [
                {
      
                    "FromPort": 80,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "LoadBalancerSecurityGroup"
                    },
                    "ToPort":80
                     
                },
                {
                    "FromPort": 22,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {
                        "Ref": "BastionSecurityGroup"
                    },
                    "ToPort": 22

                }
            ]

        },
        "LaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": "VPCGatewayAttachment",
            "Properties": {
                "ImageId": "ami-0947d2ba12ee1ff75",
                "InstanceType": "t2.micro",
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "WebServerKeyName"
                },
                "AssociatePublicIp": "false",
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/bash\n",
                                "yum update -y\n",
                                "wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm\n",
                                "yum localinstall -y mysql57-community-release-el7-8.noarch.rpm\n",
                                "yum install -y mysql-community-server\n",
                                "yum install -y httpd php php-mysqlnd git\n",
                                "cd /var/www/html\n",
                                "wget https://wordpress.org/wordpress-5.1.1.tar.gz\n",
                                "tar -xzf wordpress-5.1.1.tar.gz\n",
                                "cp -r wordpress/* /var/www/html/\n",
                                "rm -rf wordpress",
                                "rm -rf wordpress-5.1.1.tar.gz",
                                "groupadd www\n",
                                "usermod -aG www ec2-user\n",
                                "chown -R root:www /var/www\n",
                                "chmod -R 2775 /var/www\n",
                                "echo '<?php phpinfo(): ?>' > /var/www/html/phpinfo.php\n",
                                "service httpd start\n",
                                "chkconfig httpd on\n",
                                "service mysqld start\n",
                                "systemctl enable mysqld.service\n",
                                "chkconfig mysqld on\n"

                            ]
                        ]
                    }
                },
                "InstanceMonitoring": "true"
             
            }
        },
        "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "TargetGroupARNs": [
                    {
                        "Ref": "TargetGroup"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfiguration"
                },
                "MinSize": "2",
                "MaxSzie": "6",
                "DesiredSize": "3",
                "Cooldown": "300",
                "HealthCheckGracePeriod": "300",
                "HealthCheckType": "ELB",
                "VPCZoneIdentifier": [
                    {
                        "Ref": "AppLayer1Private"
                    },
                    {
                        "Ref": "AppLayer2Private"
                    }
                ]
            },
            "Tags": [
                {
                    "PropagateAtLaunch": "true",
                    "Key": "Name",
                    "Value": "instance-wordpress"
                }
            ]
        },
        "ASGCPUPolicy": {
            "Type" : "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "AutoScalingGroup"
                },
                "Cooldown": 300,
                "ScalingAdjustment": 40,
                "PredefinedMetricSpecification": {
                    "PredefinedMetricType": "ASGAverageCPUUtilization"
                }
            }
        },
        "BastionInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-0947d2ba12ee1ff75",
                "InstanceType": "t2.micro",
                "KeyName": {
                    "Ref": "WebServerKeyName"
                },
                "NetworkInterfaces": [
                    {
                        "Groupset": [
                            {
                                "Ref": "BastionSecurityGroup"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "DMZ1Public"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "BastionInstance"
                    }
                ]
            }
        }


    },
    "Outputs": {
        "pubIpAddress1": {
            "Description": "Returns public IP",
            "Value": {
                "Fn::GetAtt": [
                    "BastionInstance",
                    "PublicIp"
                ]
            }
        },
        "privIpAddress1": {
            "Description": "Returns private IP",
            "Value": {
                "Fn::GetAtt": [
                    "BastionInstance",
                    "PrivateIp"
                ]
            }
        }
    }
    


}